#!/usr/bin/env bash

function printDivider() {
  local i
  for i in $(seq 1 $COLUMNS); do echo -n '─'; done; echo ''
}

function printHelp(){
  printDivider
  echo -e 'How to use:'
  echo -e ''
  echo -e '\tx11-activity-session \e[1;31m-c \e[1;35m~/.mySession.json\e[1;30m # Starts the apps and positions them according to your session config \e[0m'
  echo -e ''
  echo -e 'Options'
  echo -e '\t\e[1;31m-h\e[1;30m # Prints this help \e[0m'
  echo -e '\t\e[1;31m-c \e[1;35m~/.mySession.json\e[1;30m # Specifies the path to a config file \e[0m'
  echo -e ''
  echo -e 'Config file example:'
  echo -e ''
  echo -e '\t{'
  echo -e '\t  "apps": ['
  echo -e '\t    {'
  echo -e '\t      "exec": "dolphin",'
  echo -e '\t      "position": "960,0",'
  echo -e '\t      "size": "960,493"'
  echo -e '\t    },'
  echo -e '\t    {'
  echo -e '\t      "exec": "konsole",'
  echo -e '\t      "position": "960,523",'
  echo -e '\t      "size": "960,493"'
  echo -e '\t    }'
  echo -e '\t  ]'
  echo -e '\t}'
  echo -e ''
  printDivider
  exit 0
}

function checkDependencies() {
  hash jq 2>/dev/null || { echo -e >&2 "This script requires\e[1;31m jq\e[0m but it's not installed. Aborting."; exit 1; }
  hash wmctrl 2>/dev/null || { echo -e >&2 "This script requires\e[1;31m wmctrl\e[0m but it's not installed. Aborting."; exit 1; }
  hash awk 2>/dev/null || { echo -e >&2 "This script requires\e[1;31m awk\e[0m but it's not installed. Aborting."; exit 1; }
}

function main() {
  local configJson outDirectory i
  configJson="$1"
  outDirectory="$(findmnt -cfn -o TARGET tmpfs)/x11-start-app-at-position-outputs"
  i=0

  [[ ! -d "$outDirectory" ]] && mkdir -p "$outDirectory"

  readarray -t apps < <(jq -c '.apps[]' "$configJson") #convert to bash arrays and remove trailing newline for each line (if any)

  IFS=$'\n' #read til newline
  for app in "${apps[@]}"; do
    local exec position size
    i=$((i + 1))

    exec=$(jq -r '.exec' <<< "${app}")
    position=$(jq -r '.position' <<< "${app}")
    size=$(jq -r '.size' <<< "${app}")

    echo "$exec at pos $position with size $size"
    ./x11-start-app-at-position.bash "$exec" "$position" "$size" >"$outDirectory/$i.out" 2>&1 &
  done
  unset IFS

  wait
  for ((j=1; j <= i; j++)); do
    echo "┌─────┄"
    while IFS= read -r line; do
      echo "│ " "$line"
    done <<< "$(cat "$outDirectory/$j.out")"
    echo "└─────┄"
  done

  rm -r "$outDirectory"
  exit 0
}

while getopts "hc:" OPT
do
    case "$OPT" in
        h) printHelp ;;
        c)
          c=${OPTARG}
          checkDependencies
          echo "Running with config $c"
          main "$c"
          exit 0
          ;;
        ?) printHelp ;;
    esac
done

printHelp